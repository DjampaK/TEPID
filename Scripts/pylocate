#! /usr/env/python

from sys import argv, exit

args = argv[1:]
if '-h' in args or '--help' in args or len(args) == 0:
    print(
            """
            pylocate

            Created by Tim Stuart

            Usage:
            pylocate -n <sample_name> \\
                     -c <main_bamfile> \\
                     -s <split_reads_bamfile> \\
                     -t <TE_annotation>

            Outputs TE insertions bedfile and TE deletions bedfile.
            """
            )
    exit()
else:
    pass

import pybedtools
import pysam
import locate
import os
from glob import glob


name = locate.checkArgs('-n', '--name')
all_mapped = locate.checkArgs('-c', '--conc')
split_mapped = locate.checkArgs('-s', '--split')
te_bed = locate.checkArgs('-t', '--te')

print 'Estimating mean insert size'
bam = pybedtools.BedTool(all_mapped)
mn, std = locate.calc_mean(bam[100000:120000])
max_dist = (4*std) + mn

print 'Processing split reads'
split = pybedtools.BedTool(split_mapped).bam_to_bed().saveas('split.temp').sort()
locate.convert_split_pairbed('split.temp', 'split_bedpe.temp')
split_bedpe = pybedtools.BedTool('split_bedpe.temp').each(locate.append_origin, word='split').saveas().sort()
split_ins = split_bedpe.filter(lambda x: (abs(int(x[1]) - int(x[4])) > 5000) or (x[0] != x[3])).saveas()

print 'Finding discordant reads'
locate.filter_discordant(all_mapped, max_dist, 'disc_bam.temp')
pysam.sort('-n', 'disc_bam.temp', 'disc_sorted')
disc = pybedtools.BedTool('disc_sorted.bam')\
.bam_to_bed(bedpe=True, mate1=True)\
.each(locate.append_origin, word='disc').saveas()
disc_split_dels = split_bedpe.cat(disc, postmerge=False).sort().saveas('disc_split_dels.temp')
disc_split_ins = split_ins.cat(disc, postmerge=False).sort().saveas('disc_split_ins.temp')

print 'Processing TE annotation'
te = pybedtools.BedTool(te_bed).sort()
disc_split_ins.pair_to_bed(te, f=0.80).saveas('intersect_ins.temp')

print 'Finding deletions'
locate.create_deletion_coords(disc_split_dels, 'del_coords.temp')
pybedtools.BedTool('del_coords.temp').intersect(te, wo=True).sort().saveas('deletions.temp')
locate.annotate_deletions('deletions.temp', name, 10, all_mapped, mn)

print 'Finding insertions'
locate.reorder('intersect_ins.temp', 'reorder_split.temp', 'forward_disc.temp', 'reverse_disc.temp')
pybedtools.BedTool('reorder_split.temp').sort().merge(c='4,5,6,9,10,11',
                                                      o='distinct,collapse,collapse,distinct,distinct,count',
                                                      d='100').saveas('split_merged.temp')
pybedtools.BedTool('forward_disc.temp').sort().merge(c='4,5,6,9,10,11',
                                                     o='distinct,collapse,collapse,distinct,distinct,count',
                                                     d='100').saveas('forward_merged.temp')
pybedtools.BedTool('reverse_disc.temp').sort().merge(c='4,5,6,9,10,11',
                                                     o='distinct,collapse,collapse,distinct,distinct,count',
                                                     d='100').saveas('reverse_merged.temp')
locate.process_merged('split_merged.temp', 'split_processed.temp', 'split')
locate.process_merged('forward_merged.temp', 'forward_processed.temp', 'disc_forward')
locate.process_merged('reverse_merged.temp', 'reverse_processed.temp', 'disc_reverse')
pybedtools.BedTool('forward_processed.temp').cat('reverse_processed.temp', postmerge=True,
    c='4,5,6,7,8,9,10',
    o='distinct,collapse,collapse,distinct,distinct,sum,distinct',
    d='50').sort().saveas('condensed_disc.temp')

locate.process_merged_disc('condensed_disc.temp', 'processed_disc.temp')
pybedtools.BedTool('processed_disc.temp').filter(lambda x: 10 < int(x[-1])).saveas('low_intersect.temp')
pybedtools.BedTool('split_processed.temp').filter(lambda x: 20 < int(x[8])).sort()\
.intersect('low_intersect.temp', wo=True)\
.each(locate.reorder_intersections)\
.saveas()\
.sort().moveto('insertions.temp')
locate.separate_reads('insertions.temp', 'insertions_{}.bed'.format(name), 'id_{}.fa'.format(name))

temp = glob('./*.temp')
for i in temp:
    os.remove(i)
os.remove('disc_sorted.bam')
